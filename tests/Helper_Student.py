#Populate the below functions as in the example lines of code to print your values for debugging
def Log_Datapath(dut,logger):
    #Log whatever signal you want from the datapath, called before positive clock edge
    logger.debug("************ DUT DATAPATH Signals ***************")
    dut._log.info("reset:%s", hex(dut.my_datapath.reset.value.integer))
    dut._log.info("ALUSrc:%s", hex(dut.my_datapath.ALUSrc.value.integer))
    dut._log.info("MemWrite:%s", hex(dut.my_datapath.MemWrite.value.integer))
    dut._log.info("RegWrite:%s", hex(dut.my_datapath.RegWrite.value.integer))
    dut._log.info("PCSrc:%s", hex(dut.my_datapath.PCSrc.value.integer))
    dut._log.info("ImmSelect:%s", hex(dut.my_datapath.ImmSelect.value.integer))
    dut._log.info("ImmSrc:%s", hex(dut.my_datapath.ImmSrc.value.integer))
    dut._log.info("ALUControl:%s", hex(dut.my_datapath.ALUControl.value.integer))
    dut._log.info("N:%s", hex(dut.my_datapath.N.value.integer))
    dut._log.info("Z:%s", hex(dut.my_datapath.Z.value.integer))
    dut._log.info("ShiftControl:%s", hex(dut.my_datapath.ShiftControl.value.integer))
    dut._log.info("PC:%s", hex(dut.my_datapath.PC.value.integer))
    dut._log.info("Instruction:%s", hex(dut.my_datapath.Instr.value.integer))
    dut._log.info("ImmExt:%s", hex(dut.my_datapath.ImmExt.value.integer))
    dut._log.info("Imm:%s", hex(dut.my_datapath.Imm.value.integer))
    dut._log.info("RD2:%s", hex(dut.my_datapath.WriteData.value.integer))
    dut._log.info("ALUResult:%s", hex(dut.my_datapath.ALUResult.value.integer))
    dut._log.info("SrcA:%s", hex(dut.my_datapath.SrcA.value.integer))
    dut._log.info("SrcB:%s", hex(dut.my_datapath.SrcB.value.integer))
    dut._log.info("PCTarget:%s", hex(dut.my_datapath.PCTarget.value.integer))
    dut._log.info("PC:%s", hex(dut.my_datapath.PC.value.integer))
    dut._log.info("PCNext:%s", hex(dut.my_datapath.PCNext.value.integer))
    dut._log.info("Result:%s", hex(dut.my_datapath.Result.value.integer))
    dut._log.info("shamt:%s", hex(dut.my_datapath.shamt.value.integer))
    dut._log.info("SrcA:%s", hex(dut.my_datapath.SrcA.value.integer))
    dut._log.info("ShifterOut:%s", hex(dut.my_datapath.ShifterOut.value.integer))


def Log_Controller(dut,logger):
    #Log whatever signal you want from the controller, called before positive clock edge
    logger.debug("************ DUT Controller Signals ***************")
    #dut._log.info("Op:%s", hex(dut.my_controller.Op.value.integer))
    #dut._log.info("Funct:%s", hex(dut.my_controller.Funct.value.integer))
    #dut._log.info("Rd:%s", hex(dut.my_controller.Rd.value.integer))
    #dut._log.info("Src2:%s", hex(dut.my_controller.Src2.value.integer))
    dut._log.info("PCSrc:%s", hex(dut.my_controller.PCSrc.value.integer))
    dut._log.info("RegWrite:%s", hex(dut.my_controller.RegWrite.value.integer))
    dut._log.info("MemWrite:%s", hex(dut.my_controller.MemWrite.value.integer))
    dut._log.info("ALUSrc:%s", hex(dut.my_controller.ALUSrc.value.integer))
    dut._log.info("ALUControl:%s", hex(dut.my_controller.ALUControl.value.integer))
    dut._log.info("ImmSrc:%s", hex(dut.my_controller.ImmSrc.value.integer))
    dut._log.info("ShiftControl:%s", hex(dut.my_controller.ShiftControl.value.integer))
    dut._log.info("op:%s", hex(dut.my_controller.op.value.integer))
    dut._log.info("Instr:%s", hex(dut.my_controller.Instr.value.integer))
    dut._log.info("ResultSrc:%s", hex(dut.my_controller.ResultSrc.value.integer))
    #dut._log.info("Zero:%s", hex(dut.my_controller.zero.value.integer))